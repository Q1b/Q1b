---
// `shiki/core` entry does not include any themes or languages or the wasm binary.
import { getHighlighterCore } from "shiki/core";

// `shiki/wasm` contains the wasm binary inlined as base64 string.
import getWasm from "shiki/wasm";

// // directly import the theme and language modules, only the ones you imported will be bundled.
// import nord from 'shiki/themes/nord.mjs'

import type { BundledLanguage } from "shiki/langs";
import type { BundledTheme } from "shiki/themes";

const highlighter = await getHighlighterCore({
  themes: [
    // or a dynamic import if you want to do chunk splitting
    import("shiki/themes/github-dark.mjs"),
    import("shiki/themes/github-light.mjs"),
  ],
  langs: [
    import("shiki/langs/astro.mjs"),
    // shiki will try to interop the module with the default export
    () => import("shiki/langs/css.mjs"),
    // or a getter that returns custom grammar
    // async () => JSON.parse(await fs.readFile('my-grammar.json', 'utf-8'))
  ],
  loadWasm: getWasm,
});

// optionally, load themes and languages after creation
await highlighter.loadTheme(import("shiki/themes/vitesse-light.mjs"));

export type Props = {
  code: string;
  lang: BundledLanguage;
};

const { code, lang } = Astro.props;

const html = highlighter.codeToHtml(code, {
  lang,
  themes: {
    dark: "github-dark",
    light: "github-light",
  },
});
---

<Fragment set:html={html} />

<style is:global>
  html.dark .shiki,
  html.dark .shiki span {
    color: var(--shiki-dark) !important;
    background-color: var(--shiki-dark-bg) !important;
    /* Optional, if you also want font styles */
    font-style: var(--shiki-dark-font-style) !important;
    font-weight: var(--shiki-dark-font-weight) !important;
    text-decoration: var(--shiki-dark-text-decoration) !important;
  }

  /* Optional, for the code block we add overflow, borders and padding */
  .shiki {
    @apply overflow-x-auto rounded-xl p-4;
  }
</style>
